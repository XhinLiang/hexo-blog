{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"source/uploads/avatar.png","path":"uploads/avatar.png","modified":1},{"_id":"themes/hueman/source/scrollLoading/style.css","path":"scrollLoading/style.css","modified":1},{"_id":"themes/hueman/source/scrollLoading/main.js","path":"scrollLoading/main.js","modified":1},{"_id":"themes/hueman/source/scrollLoading/jquery.scrollLoading.js","path":"scrollLoading/jquery.scrollLoading.js","modified":1},{"_id":"themes/hueman/source/scrollLoading/images/preloader@2x.gif","path":"scrollLoading/images/preloader@2x.gif","modified":1},{"_id":"themes/hueman/source/scrollLoading/images/preloader.gif","path":"scrollLoading/images/preloader.gif","modified":1},{"_id":"themes/hueman/source/js/script.js","path":"js/script.js","modified":1},{"_id":"themes/hueman/source/js/html-patch.js","path":"js/html-patch.js","modified":1},{"_id":"themes/hueman/source/font-awesome/fonts/fontawesome-webfont.woff2","path":"font-awesome/fonts/fontawesome-webfont.woff2","modified":1},{"_id":"themes/hueman/source/font-awesome/fonts/fontawesome-webfont.woff","path":"font-awesome/fonts/fontawesome-webfont.woff","modified":1},{"_id":"themes/hueman/source/font-awesome/fonts/fontawesome-webfont.ttf","path":"font-awesome/fonts/fontawesome-webfont.ttf","modified":1},{"_id":"themes/hueman/source/font-awesome/fonts/fontawesome-webfont.svg","path":"font-awesome/fonts/fontawesome-webfont.svg","modified":1},{"_id":"themes/hueman/source/font-awesome/fonts/fontawesome-webfont.eot","path":"font-awesome/fonts/fontawesome-webfont.eot","modified":1},{"_id":"themes/hueman/source/font-awesome/fonts/FontAwesome.otf","path":"font-awesome/fonts/FontAwesome.otf","modified":1},{"_id":"themes/hueman/source/font-awesome/css/font-awesome.min.css","path":"font-awesome/css/font-awesome.min.css","modified":1},{"_id":"themes/hueman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1},{"_id":"themes/hueman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1},{"_id":"themes/hueman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1},{"_id":"themes/hueman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1},{"_id":"themes/hueman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1},{"_id":"themes/hueman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1},{"_id":"themes/hueman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1},{"_id":"themes/hueman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1},{"_id":"themes/hueman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1},{"_id":"themes/hueman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1},{"_id":"themes/hueman/source/css/style.styl","path":"css/style.styl","modified":1},{"_id":"themes/hueman/source/css/images/thumb-default.png","path":"css/images/thumb-default.png","modified":1},{"_id":"themes/hueman/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":1},{"_id":"themes/hueman/source/css/images/s-left.png","path":"css/images/s-left.png","modified":1},{"_id":"themes/hueman/source/css/images/opacity-10.png","path":"css/images/opacity-10.png","modified":1},{"_id":"themes/hueman/source/css/images/logo-header.png","path":"css/images/logo-header.png","modified":1}],"Cache":[{"_id":"source/_posts/uploads/avatar.png","shasum":"a0c9bc739fb366d4a8efaee490e6f5f799d1f85d","modified":1446272975142},{"_id":"source/_posts/使用RxJava和Retrofit进行RESTful请求.md","shasum":"cd118d33fb8e82910669b17b3e903e5e14757086","modified":1450794745697},{"_id":"source/_posts/使用RxJava和Retrofit进行RESTful请求.md~","shasum":"cd118d33fb8e82910669b17b3e903e5e14757086","modified":1450778059720},{"_id":"source/_posts/使用二分法求整数幂.md","shasum":"2d3f904f4449fe672891698c13659ac6a77581d1","modified":1450778088132},{"_id":"source/_posts/记一次使用RxJava重构的经历.md","shasum":"79ec3d4198408577e649d68e12ccb34039b0ffe3","modified":1450829687341},{"_id":"source/_posts/记一次使用RxJava重构的经历.md~","shasum":"ef3ff76934c287af90d580861a3a138a978c002f","modified":1450829350501},{"_id":"source/uploads/avatar.png","shasum":"a0c9bc739fb366d4a8efaee490e6f5f799d1f85d","modified":1446272975142},{"_id":"themes/hueman/Gruntfile.js","shasum":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1450597608109},{"_id":"themes/hueman/LICENSE","shasum":"3975b7883caeb33f61fada7c0ef4add7ab189849","modified":1450597608109},{"_id":"themes/hueman/README.md","shasum":"a1e4687d610e256bee105047b0be5a67e97dd91e","modified":1450597608109},{"_id":"themes/hueman/_config.yml","shasum":"6bc56c114dbb8e1a1b3f356245ba7a2d21be13ae","modified":1450602216905},{"_id":"themes/hueman/languages/en.yml","shasum":"79e127d356bdf5a29098793d48d52eb9fc8e9b5c","modified":1450597608109},{"_id":"themes/hueman/languages/id.yml","shasum":"6f68344a6bfce07da5c56f2517ce84e6306cfd70","modified":1450597608109},{"_id":"themes/hueman/languages/pt-BR.yml","shasum":"5cb2ba54556fbcab115d17efcd15f6fe06e30e6f","modified":1450597608109},{"_id":"themes/hueman/languages/ru.yml","shasum":"467a6f0c14542a5a8f1e5ef059e79d2a014acfb5","modified":1450597608109},{"_id":"themes/hueman/languages/zh-CN.yml","shasum":"bdc8f74115cfe9aa4fe4eb20b36aa1030338274b","modified":1450597608109},{"_id":"themes/hueman/layout/_partial/after-footer.ejs","shasum":"37fc504b691f6196915d7f6822ab86bd345ae9d9","modified":1450597608109},{"_id":"themes/hueman/layout/_partial/archive.ejs","shasum":"ab2da9ae6c9e0f2be8afbfb3d09eda1b9704ba95","modified":1450597608109},{"_id":"themes/hueman/layout/_partial/article.ejs","shasum":"19371ace3da36c5c53f00deb5f866a353821b626","modified":1450597608109},{"_id":"themes/hueman/layout/_partial/footer.ejs","shasum":"047112d65044c9aeb6f32480eb69fb6ef69dc34a","modified":1450597608109},{"_id":"themes/hueman/layout/_partial/google-analytics.ejs","shasum":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1450597608109},{"_id":"themes/hueman/layout/_partial/head.ejs","shasum":"f1ec9267f542fc5e185b1c1efcec029cfcee5cc4","modified":1450597608109},{"_id":"themes/hueman/layout/_partial/header.ejs","shasum":"d651e20978587b4599c908be475937806719da7d","modified":1450597608109},{"_id":"themes/hueman/layout/_partial/post/category.ejs","shasum":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1450597608109},{"_id":"themes/hueman/layout/_partial/post/date.ejs","shasum":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1450597608109},{"_id":"themes/hueman/layout/_partial/post/gallery.ejs","shasum":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1450597608109},{"_id":"themes/hueman/layout/_partial/post/nav.ejs","shasum":"06924597aa5c68f4f1db13c3f719d95ddef1139f","modified":1450597608109},{"_id":"themes/hueman/layout/_partial/post/tag.ejs","shasum":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1450597608109},{"_id":"themes/hueman/layout/_partial/post/thumbnail.ejs","shasum":"a1d68ad1eb9092aca74321aff3c9fd42029c9ba6","modified":1450597608109},{"_id":"themes/hueman/layout/_partial/post/title.ejs","shasum":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1450597608109},{"_id":"themes/hueman/layout/_partial/sidebar.ejs","shasum":"c86d055f0d546af47b4f7e74dc37ffd1c3aee36a","modified":1450597608109},{"_id":"themes/hueman/layout/_widget/archive.ejs","shasum":"92fcfd830c011f1ff6e7d95443fe65067d3161f8","modified":1450597608109},{"_id":"themes/hueman/layout/_widget/category.ejs","shasum":"f0bb4be5c625003c0e38312f5079667be3a09ab7","modified":1450597608109},{"_id":"themes/hueman/layout/_widget/links.ejs","shasum":"e24c5bebe3e9f0bbaaf3b44bce8ef5ce56ae348b","modified":1450597608109},{"_id":"themes/hueman/layout/_widget/recent_posts.ejs","shasum":"100980e72996f595a579af28f7f754d5de98e3bb","modified":1450597608109},{"_id":"themes/hueman/layout/_widget/tag.ejs","shasum":"7b35103049fd0480f2631327b9381b7f4c9f5bcb","modified":1450597608109},{"_id":"themes/hueman/layout/_widget/tagcloud.ejs","shasum":"f4ac20c48e4bd6202e263efc9d320de1ad48d608","modified":1450597608109},{"_id":"themes/hueman/layout/archive.ejs","shasum":"2d86ef0f908b57af4ebf007eb8c6624def84f82a","modified":1450597608109},{"_id":"themes/hueman/layout/category.ejs","shasum":"85f2f7e0fdc16c496927511206364304ec364abe","modified":1450597608109},{"_id":"themes/hueman/layout/index.ejs","shasum":"2d86ef0f908b57af4ebf007eb8c6624def84f82a","modified":1450597608109},{"_id":"themes/hueman/layout/layout.ejs","shasum":"40bdc69f707c67551a0d003f0244e8db7eed94c0","modified":1450597608109},{"_id":"themes/hueman/layout/page.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1450597608109},{"_id":"themes/hueman/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1450597608109},{"_id":"themes/hueman/layout/tag.ejs","shasum":"2d86ef0f908b57af4ebf007eb8c6624def84f82a","modified":1450597608109},{"_id":"themes/hueman/package.json","shasum":"47c5adba0477e92e742349bf86f28bfeb701b3c1","modified":1450597608109},{"_id":"themes/hueman/scripts/fancybox.js","shasum":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1450597608109},{"_id":"themes/hueman/source/css/_extend.styl","shasum":"b18ccaef1050ebce34b3c88f04e59ec58e813d8e","modified":1450597608109},{"_id":"themes/hueman/source/css/_partial/archive.styl","shasum":"c611142866096da7c7428d2ef8fd4079a781f57c","modified":1450597608109},{"_id":"themes/hueman/source/css/_partial/article.styl","shasum":"cdd15d329dd6ca381256907f63454aa04b256e30","modified":1450597608109},{"_id":"themes/hueman/source/css/_partial/assets.styl","shasum":"7e01b359c28c258b22ca8d64d00f74232359eabe","modified":1450597608109},{"_id":"themes/hueman/source/css/_partial/comment.styl","shasum":"2683cecb7d69e23a3fb1e80f10141454fb4cb232","modified":1450597608109},{"_id":"themes/hueman/source/css/_partial/footer.styl","shasum":"1345ae77ea03b5660d6362e2f0b221f12aadc5fc","modified":1450597608109},{"_id":"themes/hueman/source/css/_partial/header.styl","shasum":"57db2edb99734989ee147226dc952506cb8f73e2","modified":1450597608109},{"_id":"themes/hueman/source/css/_partial/highlight.styl","shasum":"9332816d92370cff8e252631ef65cb78c53ebb2a","modified":1450597608109},{"_id":"themes/hueman/source/css/_partial/nav.styl","shasum":"0c31cfdf9e3cdef6d1c470ef29c1a1bdbe2c5987","modified":1450597608109},{"_id":"themes/hueman/source/css/_partial/sidebar.styl","shasum":"4542446b619eda2b691da3c55fa734f4dc4b741e","modified":1450597608109},{"_id":"themes/hueman/source/css/_responsive.styl","shasum":"c2fa5a5e73bc2601e4f85a3f98c37ecced96cc65","modified":1450597608109},{"_id":"themes/hueman/source/css/_retina.styl","shasum":"e0445c7caa049250fe3811f55cc82f389009e90f","modified":1450597608109},{"_id":"themes/hueman/source/css/_variables.styl","shasum":"8e3c8990c6b3942376f5956cd6aae8e6b60092be","modified":1450597608109},{"_id":"themes/hueman/source/css/images/logo-header.png","shasum":"a874be8f3e33831614a421d1a74d2c13bd5eba59","modified":1450597608109},{"_id":"themes/hueman/source/css/images/opacity-10.png","shasum":"bbc979866c5b50e8adb348419154b28b1ff44d78","modified":1450597608109},{"_id":"themes/hueman/source/css/images/s-left.png","shasum":"c8cac4f4e3492606fab93196364bd0f87d93bb98","modified":1450597608109},{"_id":"themes/hueman/source/css/images/thumb-default-small.png","shasum":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1450597608109},{"_id":"themes/hueman/source/css/images/thumb-default.png","shasum":"2d0ba175d958d342494241c616a74d37f48059fb","modified":1450597608109},{"_id":"themes/hueman/source/css/style.styl","shasum":"f2fe18cc0f5a8fb46aa2ce28fc7b7826a2471dd8","modified":1450597608109},{"_id":"themes/hueman/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1450597608109},{"_id":"themes/hueman/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1450597608113},{"_id":"themes/hueman/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1450597608113},{"_id":"themes/hueman/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1450597608113},{"_id":"themes/hueman/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1450597608113},{"_id":"themes/hueman/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1450597608113},{"_id":"themes/hueman/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1450597608113},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1450597608113},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1450597608113},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1450597608113},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1450597608113},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1450597608113},{"_id":"themes/hueman/source/fancybox/jquery.fancybox.css","shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1450597608113},{"_id":"themes/hueman/source/fancybox/jquery.fancybox.js","shasum":"c36aa96c08e0f0bc10a91e71f5f5aa1dbe4435c6","modified":1450597608113},{"_id":"themes/hueman/source/fancybox/jquery.fancybox.pack.js","shasum":"4bdce95d7ed1e6e3f0cdbb21972f6ed730db6ec9","modified":1450597608113},{"_id":"themes/hueman/source/font-awesome/css/font-awesome.min.css","shasum":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1450597608113},{"_id":"themes/hueman/source/font-awesome/fonts/fontawesome-webfont.woff2","shasum":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1450597608117},{"_id":"themes/hueman/source/js/html-patch.js","shasum":"f58064e8afcc34e816d8e400dafb850bd064a207","modified":1450597608117},{"_id":"themes/hueman/source/js/script.js","shasum":"3a882ecf9ed0a1a921090d954037f90d4e5089e8","modified":1450597608117},{"_id":"themes/hueman/source/scrollLoading/images/preloader.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1450597608117},{"_id":"themes/hueman/source/scrollLoading/images/preloader@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1450597608117},{"_id":"themes/hueman/source/scrollLoading/jquery.scrollLoading.js","shasum":"1a3eab1ab2c4644fe1ada921bd1bdb083268a751","modified":1450597608117},{"_id":"themes/hueman/source/scrollLoading/main.js","shasum":"d1e92247f199fa93c7b3672e6b2ad9ad74a0a529","modified":1450597608117},{"_id":"themes/hueman/source/scrollLoading/style.css","shasum":"4ee06b1478b786aed0817b629cf58f336e5eff62","modified":1450597608117},{"_id":"themes/hueman/source/font-awesome/fonts/FontAwesome.otf","shasum":"0112e96f327d413938d37c1693806f468ffdbace","modified":1450597608113},{"_id":"themes/hueman/source/font-awesome/fonts/fontawesome-webfont.eot","shasum":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1450597608113},{"_id":"themes/hueman/source/font-awesome/fonts/fontawesome-webfont.woff","shasum":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1450597608117},{"_id":"themes/hueman/source/font-awesome/fonts/fontawesome-webfont.ttf","shasum":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1450597608117},{"_id":"themes/hueman/source/font-awesome/fonts/fontawesome-webfont.svg","shasum":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1450597608113},{"_id":"public/uploads/avatar.png","modified":1450829701574,"shasum":"a0c9bc739fb366d4a8efaee490e6f5f799d1f85d"},{"_id":"public/scrollLoading/style.css","modified":1450829701579,"shasum":"4ee06b1478b786aed0817b629cf58f336e5eff62"},{"_id":"public/scrollLoading/main.js","modified":1450829701580,"shasum":"d1e92247f199fa93c7b3672e6b2ad9ad74a0a529"},{"_id":"public/scrollLoading/jquery.scrollLoading.js","modified":1450829701582,"shasum":"1a3eab1ab2c4644fe1ada921bd1bdb083268a751"},{"_id":"public/scrollLoading/images/preloader@2x.gif","modified":1450829701584,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/scrollLoading/images/preloader.gif","modified":1450829701587,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/js/script.js","modified":1450829701590,"shasum":"3a882ecf9ed0a1a921090d954037f90d4e5089e8"},{"_id":"public/js/html-patch.js","modified":1450829701593,"shasum":"f58064e8afcc34e816d8e400dafb850bd064a207"},{"_id":"public/font-awesome/fonts/fontawesome-webfont.woff2","modified":1450829701596,"shasum":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea"},{"_id":"public/font-awesome/fonts/fontawesome-webfont.woff","modified":1450829701603,"shasum":"507970402e328b2baeb05bde73bf9ded4e2c3a2d"},{"_id":"public/font-awesome/fonts/fontawesome-webfont.ttf","modified":1450829701609,"shasum":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9"},{"_id":"public/font-awesome/fonts/fontawesome-webfont.svg","modified":1450829701613,"shasum":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824"},{"_id":"public/font-awesome/fonts/fontawesome-webfont.eot","modified":1450829701619,"shasum":"b3c2f08e73320135b69c23a3908b87a12053a2f6"},{"_id":"public/font-awesome/fonts/FontAwesome.otf","modified":1450829701622,"shasum":"0112e96f327d413938d37c1693806f468ffdbace"},{"_id":"public/font-awesome/css/font-awesome.min.css","modified":1450829701623,"shasum":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22"},{"_id":"public/fancybox/jquery.fancybox.pack.js","modified":1450829701625,"shasum":"4bdce95d7ed1e6e3f0cdbb21972f6ed730db6ec9"},{"_id":"public/fancybox/jquery.fancybox.js","modified":1450829701628,"shasum":"c36aa96c08e0f0bc10a91e71f5f5aa1dbe4435c6"},{"_id":"public/fancybox/jquery.fancybox.css","modified":1450829701629,"shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","modified":1450829701631,"shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","modified":1450829701634,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","modified":1450829701635,"shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","modified":1450829701637,"shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","modified":1450829701638,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/fancybox/helpers/fancybox_buttons.png","modified":1450829701639,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/fancybox/fancybox_sprite@2x.png","modified":1450829701641,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/fancybox/fancybox_sprite.png","modified":1450829701642,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/fancybox/fancybox_overlay.png","modified":1450829701644,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/fancybox/fancybox_loading@2x.gif","modified":1450829701647,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/fancybox/fancybox_loading.gif","modified":1450829701650,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/fancybox/blank.gif","modified":1450829701652,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/css/style.css","modified":1450829702228,"shasum":"7ef86240c4dda142f35d9d32830eecc55615aed0"},{"_id":"public/css/images/thumb-default.png","modified":1450829702433,"shasum":"2d0ba175d958d342494241c616a74d37f48059fb"},{"_id":"public/css/images/thumb-default-small.png","modified":1450829702436,"shasum":"e8403b97ed9251f9f5207765b0ce796c5000b4ba"},{"_id":"public/css/images/s-left.png","modified":1450829702438,"shasum":"c8cac4f4e3492606fab93196364bd0f87d93bb98"},{"_id":"public/css/images/opacity-10.png","modified":1450829702440,"shasum":"bbc979866c5b50e8adb348419154b28b1ff44d78"},{"_id":"public/css/images/logo-header.png","modified":1450829702441,"shasum":"a874be8f3e33831614a421d1a74d2c13bd5eba59"},{"_id":"public/2015/12/21/记一次使用RxJava重构的经历/index.html","modified":1450829702536,"shasum":"9c32d59597a85223f60e721157b3e8d68ff5d43d"},{"_id":"public/2015/12/03/使用RxJava和Retrofit进行RESTful请求/index.html","modified":1450829702592,"shasum":"08faa57d407299f640c9be5e827d523950a12665"},{"_id":"public/2015/12/03/使用二分法求整数幂/index.html","modified":1450829702652,"shasum":"eaad31814aa54890a71e3f674e5276638466e1fe"},{"_id":"public/archives/index.html","modified":1450829702701,"shasum":"c9a6e1e597b256a02adb59451bb4a3f2f88f1a47"},{"_id":"public/archives/2015/index.html","modified":1450829702756,"shasum":"6e33948b0a910b87d2a41bab6398e66b60da214c"},{"_id":"public/archives/2015/12/index.html","modified":1450829702805,"shasum":"7f5b66841864bb4a1162c45fa61da996d1aa8bd6"},{"_id":"public/categories/Android/index.html","modified":1450829702848,"shasum":"d347d2afd66656fcb099ccb027a545db0fec5168"},{"_id":"public/categories/算法/index.html","modified":1450829702889,"shasum":"4cf3d1b05e4a1eb683c6dda6e3bed635ef205158"},{"_id":"public/atom.xml","modified":1450829702891,"shasum":"916aec39583d094aeb87c376d354e78326f9855c"},{"_id":"public/index.html","modified":1450829702945,"shasum":"dbb49ff9baa99e6006b53d3e5c685f4ca3c87f4e"},{"_id":"public/sitemap.xml","modified":1450829702947,"shasum":"340a79440bb6e1a0b71aa5ead1255270da916c7f"},{"_id":"public/tags/Android/index.html","modified":1450829702990,"shasum":"50595f2c7800fe6e9b4504640c7fe4bf5b2d8aa7"},{"_id":"public/tags/Java/index.html","modified":1450829703025,"shasum":"73425b3f8a0866f79a009b99af37cc4430307b18"},{"_id":"public/tags/RxJava/index.html","modified":1450829703070,"shasum":"08288ee050413dd3fabdbd30aa8108af60fc33bb"},{"_id":"public/tags/C/index.html","modified":1450829703107,"shasum":"2dd32dc4a79b9d1fede7c2f1963e13023df2d6c3"},{"_id":"public/tags/ACM/index.html","modified":1450829703144,"shasum":"b4b58d2b1cb05d15f6e329a1b7cf5990452d6414"},{"_id":"public/tags/算法/index.html","modified":1450829703187,"shasum":"e2c515c5659082a5e5227a130c150b32525518a8"}],"Category":[{"name":"Android","_id":"ciii2jl8v0001oksqptf99059"},{"name":"算法","_id":"ciii2jl94000aoksq2pcsfx9m"}],"Data":[],"Page":[],"Post":[{"title":"记一次使用RxJava重构的经历","date":"2015-12-21T00:55:29.000Z","toc":true,"_content":"\n## 前言\n\n垃圾代码时常会出现在时间不够的情况下，所以重构是一件非常重要非常有意义的事情。\n\n## 需求\n\n我们的 **[Studio](https://github.com/XhinLiang/Studio)** 项目中需要上传头像的功能，所以选择了一个开源库 [PhotoPicker](https://github.com/donglua/PhotoPicker) 来做图片的选择。通过这个库我们就可以在**Activity # onActivityResult** 方法来获取用户选择的图片地址，然后通过 [LeanCloud](https://leancloud.cn/) 的 **AVFile** 来进行上传。\n\n## 原来的实现\n\n```\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    super.onActivityResult(requestCode, resultCode, data);\n    if (resultCode != RESULT_OK)\n        return;\n    if (requestCode != 1 || data == null)\n        return;\n    String photo = data.getStringArrayListExtra(PhotoPickerActivity.KEY_SELECTED_PHOTOS).get(0);\n    AVFile file = null;\n    try {\n        file = AVFile.withAbsoluteLocalPath(String.format(\"avatar_%s.jpg\", user.name), photo);\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    if (file == null)\n        return;\n    final ProgressDialog pd = new ProgressDialog(this);\n    pd.setMax(100);\n    pd.show();\n    final AVFile finalFile = file;\n    file.saveInBackground(new SaveCallback() {\n        @Override\n        public void done(AVException e) {\n            pd.hide();\n            if (e != null) {\n                showSimpleDialog(R.string.error);\n                return;\n            }\n            user.imgurl = finalFile.getUrl();\n            observableUpdate.subscribe(observerUser);\n        }\n    }, new ProgressCallback() {\n        @Override\n        public void done(Integer integer) {\n            pd.setProgress(integer);\n        }\n    });\n}\n```\n\n\n## 存在的问题\n\n*原先的这段代码事实上是可以用的，运行起来也没有什么问题，但是作为代码洁癖患者，我们还是可以挑出刺来*\n- 在主线程进行 **IO操作** ，影响用户体验。\n- **IO** 操作有 **Checked异常** ，但是在代码中捕获异常后代码变得非常难看。 \n\n**最让我不能忍的莫过于这段**\n\n```\nAVFile file = null;\ntry {\n    file = AVFile.withAbsoluteLocalPath(String.format(\"avatar_%s.jpg\", user.name), photo);\n} catch (IOException e) {\n    e.printStackTrace();\n}\nif (file == null)\n    return;\nfinal ProgressDialog pd = new ProgressDialog(this);\npd.setMax(100);\npd.show();\nfinal AVFile finalFile = file;\n```\n由于 **AVFile** 的 **withAbsoluteLocalPath** 方法有 **Checked** 异常，在调用的时候必须捕获异常，然而在上传头像 （**AVFile** 的 **saveInBackgroud** 方法）中，我们需要更新用户的 **头像URL** 而需要使用到这个 **AVFile** 对象，所以我们还得在定义一个 **final** 对象！\n\n```\nfinal AVFile finalFile = file;\n```\n#### 多么蛋疼！！！\n\n## 解决办法\n\n事实上我们根据 **RxJava** “流”的概念可以想到，这一大串代码，事实上也可以化为一个”流“，而这个”流“就是从我们获取的头像的本地地址开始的。\n\n然后接下来的代码都很简单了\n\n```\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    super.onActivityResult(requestCode, resultCode, data);\n    if (resultCode != RESULT_OK || requestCode != REQUEST_FOR_SELECT_PICTURE || data == null)\n        return;\n    String photo = data.getStringArrayListExtra(PhotoPickerActivity.KEY_SELECTED_PHOTOS).get(0);\n    Observable.just(photo)\n            .subscribeOn(Schedulers.io())\n            .observeOn(Schedulers.io())\n            .map(new Func1<String, AVFile>() {\n                @Override\n                public AVFile call(String s) {\n                    try {\n                        return AVFile.withAbsoluteLocalPath(String.format(\"avatar_%s_%d.jpg\", user.name, System.currentTimeMillis()), s);\n                    } catch (IOException e) {\n                        return null;\n                    }\n                }\n            })\n            .observeOn(AndroidSchedulers.mainThread())\n            .filter(new Func1<AVFile, Boolean>() {\n                @Override\n                public Boolean call(AVFile avFile) {\n                    if (avFile == null) {\n                        showSimpleDialog(R.string.can_not_find_file);\n                        return false;\n                    }\n                    return true;\n                }\n            })\n            .compose(this.<AVFile>bindToLifecycle())\n            .subscribe(new Action1<AVFile>() {\n                @Override\n                public void call(final AVFile file) {\n                    final ProgressDialog pd = new ProgressDialog(MyDetailsActivity.this);\n                    pd.setMax(100);\n                    pd.show();\n                    file.saveInBackground(new SaveCallback() {\n                        @Override\n                        public void done(AVException e) {\n                            pd.hide();\n                            if (e != null) {\n                                showSimpleDialog(R.string.error);\n                                return;\n                            }\n                            user.imgurl = file.getUrl();\n                            observableUpdate.subscribe(observerUser);\n                        }\n                    }, new ProgressCallback() {\n                        @Override\n                        public void done(Integer integer) {\n                            pd.setProgress(integer);\n                        }\n                    });\n                }\n            });\n}\n```\n\n\n使用了 **RxJava**，我们的代码变得非常清晰，也比原来的代码优雅了很多。更重要的是，我们通过 **RxJava** 的 **线程控制** ，把 **IO操作** 真正放到了 **IO线程** 中，主线程不受影响，界面依旧流畅。\n\n## 超越重构\n*维基百科上对于 ”重构“ 一词的解释如下*\n\n> 代码重构（英语：Code refactoring）指对软件代码做任何更动以增加可读性或者简化结构而不影响输出结果。 \n\n**对于这一段代码，我们要做的重构工作已经完成，然而还有一些小问题**\n\n- 进度条没有显示\n- 没有对上传的图片进行压缩\n\n其实第一条很简单，只需把 **ProgressDialog** 的样式改为水平即可\n\n```\nfinal ProgressDialog pd = new ProgressDialog(MyDetailsActivity.this);\npd.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);\npd.setMax(100);\npd.show();\n```\n第二条改起来也简单，我们根据用户选择的图片找到这个文件，读入为 **Bitmap** ，然后获取它的**原始宽高**，然后再根据它**原始宽高**的大小判断是否需要进行压缩（我们只进行尺寸压缩，不进行质量压缩），这里我们选择 **1000px** 作为临界值，如果宽度或者高度有一个大于 **1000px** 则对宽高进行等比例压缩。\n\n **完整代码如下**\n\n```\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    super.onActivityResult(requestCode, resultCode, data);\n    if (resultCode != RESULT_OK || requestCode != REQUEST_FOR_SELECT_PICTURE || data == null)\n            return;\n    //因为设置了PhotoPicker只能选择一个图片，所以这里只选取List的第一个元素\n    String photo = data.getStringArrayListExtra(PhotoPickerActivity.KEY_SELECTED_PHOTOS).get(0);\n    //这一段IO处理事实上是耗时的，但又没有到达需要加上等待动画的地步\n    Observable.just(photo)\n            .subscribeOn(Schedulers.io())\n            .observeOn(Schedulers.io())\n            .map(new Func1<String, File>() {\n                @Override\n                public File call(String filePath) {\n                    Bitmap bitmap = compressImageByPixel(filePath, 1000);\n                    String uploadName = String.format(\"avatar_%s_%d\", user.name, System.currentTimeMillis());\n                    File file = new File(getFilesDir().getAbsolutePath(), uploadName);\n                    try {\n                        bitmap.compress(Bitmap.CompressFormat.JPEG, 100, new FileOutputStream(file));\n                    } catch (FileNotFoundException e) {\n                        return null;\n                    } finally {\n                        bitmap.recycle();\n                    }\n                    return file;\n                }\n            })\n            .map(new Func1<File, AVFile>() {\n                @Override\n                public AVFile call(File compressFile) {\n                    try {\n                        return AVFile.withFile(compressFile.getName(), compressFile);\n                    } catch (IOException e) {\n                        return null;\n                    }\n                }\n            })\n            .observeOn(AndroidSchedulers.mainThread())\n            .filter(new Func1<AVFile, Boolean>() {\n                @Override\n                public Boolean call(AVFile avFile) {\n                    if (avFile == null) {\n                        showSimpleDialog(R.string.can_not_find_file);\n                        return false;\n                    }\n                    return true;\n                }\n            })\n            .compose(this.<AVFile>bindToLifecycle())//这里用了RxLifeCycle来管理Subscription\n            .subscribe(new Action1<AVFile>() {\n                @Override\n                public void call(final AVFile file) {\n                    final ProgressDialog pd = new ProgressDialog(MyDetailsActivity.this);\n                    pd.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);\n                    pd.setMax(100);\n                    pd.show();\n                    file.saveInBackground(new SaveCallback() {\n                        @Override\n                        public void done(AVException e) {\n                            pd.dismiss();\n                            if (e != null) {\n                                showSimpleDialog(R.string.error, e.getMessage());\n                                return;\n                            }\n                            user.imgurl = file.getUrl();\n                            observableUpdate.subscribe(observerUser);\n                        }\n                    }, new ProgressCallback() {\n                        @Override\n                        public void done(Integer integer) {\n                            pd.setProgress(integer);\n                        }\n                    });\n                }\n            });\n}\n\npublic Bitmap compressImageByPixel(String imgPath, int maxSize) {\n    BitmapFactory.Options newOpts = new BitmapFactory.Options();\n    newOpts.inJustDecodeBounds = true;//只读边,不读内容\n    BitmapFactory.decodeFile(imgPath, newOpts);\n    newOpts.inJustDecodeBounds = false;\n    int be = 1;\n    //缩放比,用高或者宽其中较大的一个数据进行计算\n    if (newOpts.outWidth > newOpts.outHeight && newOpts.outWidth > maxSize) {\n        be = newOpts.outWidth / maxSize;\n    }\n    if (newOpts.outWidth < newOpts.outHeight && newOpts.outWidth > maxSize) {\n        be = newOpts.outHeight / maxSize;\n    }\n    be++;\n    newOpts.inSampleSize = be;//设置采样率\n    return BitmapFactory.decodeFile(imgPath, newOpts);\n}\n```\n\n\n## 后记\n **[Studio](https://github.com/XhinLiang/Studio)** 是我很用心写的一个应用，代码已经尽我能力进行了优化，如果大家有时间不妨到看看源代码，欢迎大家 **PR** 。\n","source":"_posts/记一次使用RxJava重构的经历.md","raw":"title: 记一次使用RxJava重构的经历\ndate: 2015-12-21 08:55:29\ntags: [Android,Java,RxJava]\ncategories: Android\ntoc: true\n---\n\n## 前言\n\n垃圾代码时常会出现在时间不够的情况下，所以重构是一件非常重要非常有意义的事情。\n\n## 需求\n\n我们的 **[Studio](https://github.com/XhinLiang/Studio)** 项目中需要上传头像的功能，所以选择了一个开源库 [PhotoPicker](https://github.com/donglua/PhotoPicker) 来做图片的选择。通过这个库我们就可以在**Activity # onActivityResult** 方法来获取用户选择的图片地址，然后通过 [LeanCloud](https://leancloud.cn/) 的 **AVFile** 来进行上传。\n\n## 原来的实现\n\n```\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    super.onActivityResult(requestCode, resultCode, data);\n    if (resultCode != RESULT_OK)\n        return;\n    if (requestCode != 1 || data == null)\n        return;\n    String photo = data.getStringArrayListExtra(PhotoPickerActivity.KEY_SELECTED_PHOTOS).get(0);\n    AVFile file = null;\n    try {\n        file = AVFile.withAbsoluteLocalPath(String.format(\"avatar_%s.jpg\", user.name), photo);\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    if (file == null)\n        return;\n    final ProgressDialog pd = new ProgressDialog(this);\n    pd.setMax(100);\n    pd.show();\n    final AVFile finalFile = file;\n    file.saveInBackground(new SaveCallback() {\n        @Override\n        public void done(AVException e) {\n            pd.hide();\n            if (e != null) {\n                showSimpleDialog(R.string.error);\n                return;\n            }\n            user.imgurl = finalFile.getUrl();\n            observableUpdate.subscribe(observerUser);\n        }\n    }, new ProgressCallback() {\n        @Override\n        public void done(Integer integer) {\n            pd.setProgress(integer);\n        }\n    });\n}\n```\n\n\n## 存在的问题\n\n*原先的这段代码事实上是可以用的，运行起来也没有什么问题，但是作为代码洁癖患者，我们还是可以挑出刺来*\n- 在主线程进行 **IO操作** ，影响用户体验。\n- **IO** 操作有 **Checked异常** ，但是在代码中捕获异常后代码变得非常难看。 \n\n**最让我不能忍的莫过于这段**\n\n```\nAVFile file = null;\ntry {\n    file = AVFile.withAbsoluteLocalPath(String.format(\"avatar_%s.jpg\", user.name), photo);\n} catch (IOException e) {\n    e.printStackTrace();\n}\nif (file == null)\n    return;\nfinal ProgressDialog pd = new ProgressDialog(this);\npd.setMax(100);\npd.show();\nfinal AVFile finalFile = file;\n```\n由于 **AVFile** 的 **withAbsoluteLocalPath** 方法有 **Checked** 异常，在调用的时候必须捕获异常，然而在上传头像 （**AVFile** 的 **saveInBackgroud** 方法）中，我们需要更新用户的 **头像URL** 而需要使用到这个 **AVFile** 对象，所以我们还得在定义一个 **final** 对象！\n\n```\nfinal AVFile finalFile = file;\n```\n#### 多么蛋疼！！！\n\n## 解决办法\n\n事实上我们根据 **RxJava** “流”的概念可以想到，这一大串代码，事实上也可以化为一个”流“，而这个”流“就是从我们获取的头像的本地地址开始的。\n\n然后接下来的代码都很简单了\n\n```\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    super.onActivityResult(requestCode, resultCode, data);\n    if (resultCode != RESULT_OK || requestCode != REQUEST_FOR_SELECT_PICTURE || data == null)\n        return;\n    String photo = data.getStringArrayListExtra(PhotoPickerActivity.KEY_SELECTED_PHOTOS).get(0);\n    Observable.just(photo)\n            .subscribeOn(Schedulers.io())\n            .observeOn(Schedulers.io())\n            .map(new Func1<String, AVFile>() {\n                @Override\n                public AVFile call(String s) {\n                    try {\n                        return AVFile.withAbsoluteLocalPath(String.format(\"avatar_%s_%d.jpg\", user.name, System.currentTimeMillis()), s);\n                    } catch (IOException e) {\n                        return null;\n                    }\n                }\n            })\n            .observeOn(AndroidSchedulers.mainThread())\n            .filter(new Func1<AVFile, Boolean>() {\n                @Override\n                public Boolean call(AVFile avFile) {\n                    if (avFile == null) {\n                        showSimpleDialog(R.string.can_not_find_file);\n                        return false;\n                    }\n                    return true;\n                }\n            })\n            .compose(this.<AVFile>bindToLifecycle())\n            .subscribe(new Action1<AVFile>() {\n                @Override\n                public void call(final AVFile file) {\n                    final ProgressDialog pd = new ProgressDialog(MyDetailsActivity.this);\n                    pd.setMax(100);\n                    pd.show();\n                    file.saveInBackground(new SaveCallback() {\n                        @Override\n                        public void done(AVException e) {\n                            pd.hide();\n                            if (e != null) {\n                                showSimpleDialog(R.string.error);\n                                return;\n                            }\n                            user.imgurl = file.getUrl();\n                            observableUpdate.subscribe(observerUser);\n                        }\n                    }, new ProgressCallback() {\n                        @Override\n                        public void done(Integer integer) {\n                            pd.setProgress(integer);\n                        }\n                    });\n                }\n            });\n}\n```\n\n\n使用了 **RxJava**，我们的代码变得非常清晰，也比原来的代码优雅了很多。更重要的是，我们通过 **RxJava** 的 **线程控制** ，把 **IO操作** 真正放到了 **IO线程** 中，主线程不受影响，界面依旧流畅。\n\n## 超越重构\n*维基百科上对于 ”重构“ 一词的解释如下*\n\n> 代码重构（英语：Code refactoring）指对软件代码做任何更动以增加可读性或者简化结构而不影响输出结果。 \n\n**对于这一段代码，我们要做的重构工作已经完成，然而还有一些小问题**\n\n- 进度条没有显示\n- 没有对上传的图片进行压缩\n\n其实第一条很简单，只需把 **ProgressDialog** 的样式改为水平即可\n\n```\nfinal ProgressDialog pd = new ProgressDialog(MyDetailsActivity.this);\npd.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);\npd.setMax(100);\npd.show();\n```\n第二条改起来也简单，我们根据用户选择的图片找到这个文件，读入为 **Bitmap** ，然后获取它的**原始宽高**，然后再根据它**原始宽高**的大小判断是否需要进行压缩（我们只进行尺寸压缩，不进行质量压缩），这里我们选择 **1000px** 作为临界值，如果宽度或者高度有一个大于 **1000px** 则对宽高进行等比例压缩。\n\n **完整代码如下**\n\n```\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    super.onActivityResult(requestCode, resultCode, data);\n    if (resultCode != RESULT_OK || requestCode != REQUEST_FOR_SELECT_PICTURE || data == null)\n            return;\n    //因为设置了PhotoPicker只能选择一个图片，所以这里只选取List的第一个元素\n    String photo = data.getStringArrayListExtra(PhotoPickerActivity.KEY_SELECTED_PHOTOS).get(0);\n    //这一段IO处理事实上是耗时的，但又没有到达需要加上等待动画的地步\n    Observable.just(photo)\n            .subscribeOn(Schedulers.io())\n            .observeOn(Schedulers.io())\n            .map(new Func1<String, File>() {\n                @Override\n                public File call(String filePath) {\n                    Bitmap bitmap = compressImageByPixel(filePath, 1000);\n                    String uploadName = String.format(\"avatar_%s_%d\", user.name, System.currentTimeMillis());\n                    File file = new File(getFilesDir().getAbsolutePath(), uploadName);\n                    try {\n                        bitmap.compress(Bitmap.CompressFormat.JPEG, 100, new FileOutputStream(file));\n                    } catch (FileNotFoundException e) {\n                        return null;\n                    } finally {\n                        bitmap.recycle();\n                    }\n                    return file;\n                }\n            })\n            .map(new Func1<File, AVFile>() {\n                @Override\n                public AVFile call(File compressFile) {\n                    try {\n                        return AVFile.withFile(compressFile.getName(), compressFile);\n                    } catch (IOException e) {\n                        return null;\n                    }\n                }\n            })\n            .observeOn(AndroidSchedulers.mainThread())\n            .filter(new Func1<AVFile, Boolean>() {\n                @Override\n                public Boolean call(AVFile avFile) {\n                    if (avFile == null) {\n                        showSimpleDialog(R.string.can_not_find_file);\n                        return false;\n                    }\n                    return true;\n                }\n            })\n            .compose(this.<AVFile>bindToLifecycle())//这里用了RxLifeCycle来管理Subscription\n            .subscribe(new Action1<AVFile>() {\n                @Override\n                public void call(final AVFile file) {\n                    final ProgressDialog pd = new ProgressDialog(MyDetailsActivity.this);\n                    pd.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);\n                    pd.setMax(100);\n                    pd.show();\n                    file.saveInBackground(new SaveCallback() {\n                        @Override\n                        public void done(AVException e) {\n                            pd.dismiss();\n                            if (e != null) {\n                                showSimpleDialog(R.string.error, e.getMessage());\n                                return;\n                            }\n                            user.imgurl = file.getUrl();\n                            observableUpdate.subscribe(observerUser);\n                        }\n                    }, new ProgressCallback() {\n                        @Override\n                        public void done(Integer integer) {\n                            pd.setProgress(integer);\n                        }\n                    });\n                }\n            });\n}\n\npublic Bitmap compressImageByPixel(String imgPath, int maxSize) {\n    BitmapFactory.Options newOpts = new BitmapFactory.Options();\n    newOpts.inJustDecodeBounds = true;//只读边,不读内容\n    BitmapFactory.decodeFile(imgPath, newOpts);\n    newOpts.inJustDecodeBounds = false;\n    int be = 1;\n    //缩放比,用高或者宽其中较大的一个数据进行计算\n    if (newOpts.outWidth > newOpts.outHeight && newOpts.outWidth > maxSize) {\n        be = newOpts.outWidth / maxSize;\n    }\n    if (newOpts.outWidth < newOpts.outHeight && newOpts.outWidth > maxSize) {\n        be = newOpts.outHeight / maxSize;\n    }\n    be++;\n    newOpts.inSampleSize = be;//设置采样率\n    return BitmapFactory.decodeFile(imgPath, newOpts);\n}\n```\n\n\n## 后记\n **[Studio](https://github.com/XhinLiang/Studio)** 是我很用心写的一个应用，代码已经尽我能力进行了优化，如果大家有时间不妨到看看源代码，欢迎大家 **PR** 。\n","slug":"记一次使用RxJava重构的经历","published":1,"updated":"2015-12-23T00:14:47.341Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciii2jl8p0000oksqwutf9sbt"},{"title":"使用二分法求整数幂","date":"2015-12-03T00:55:29.000Z","toc":true,"_content":"\n\n### 引言\n---\n在应用中求幂是一个经常使用到的运算。\n那么我们求幂的时候是不是经常这样写\n\n```\nint power(int x,  int n)\n{\n    int result = 1;\n    while (n--)\n        result *= x;\n    return result;\n}\n```\n\n这样写简单直观，但是时间复杂度太高了。\n### 解决思路\n---\n为了减少时间的消耗，我们可以使用**二分法**。\n\n**举个例子：求2的8次幂。**\n\n**设结果为result** \n\n```\nresult = 2^8\n设result1 = 2^4，很容易推出 result  =  result1*result1\n设result2 = 2^2，同理，result1 = result2*result2\n......\n```\n\n```\n再举个例子,result3 = 2^7\n那么 result3 = result1 * 2^3\n2^3 = 2^2 *2^1\n```\n\n那么规律出来了，我们可以写程序了\n\n这里用了一些不常用的C的知识，有可能比较晦涩难懂。\n\n**稳妥起见，这里再复习一下C的知识**\n\n### &和&&的区别：\n#### &--按位与\n举个例子  \n 7的二进制是0111，1的二进制是0001；\n 7&1 即是  0111&0001  = 0001（二进制） = 1（十进制）；\n再举个例子  \n 11&6  即是 1011&0110 = 0010 = 2;\n#### &&--逻辑与\n这个很简单了，只要两个数都不为0 ；结果就是1\n10&&1 = 1；\n1&0 = 0；\n#### <<，>>  位左移和位右移\n依旧举例，将8向左移两位，\n8 >> 2 即为 1000（二进制） 左移两位，结果就是10（二进制），化为十进制那就是2；\n**P.S : n >>= 2 与 n =  n>>2 结果相同。**\n但是在运算速度和内存占用上比后者好一些，这里就不给出详细的解释了。\n\n\n### 核心代码\n---\n```\nint power(int x, int n)\n{\n    if (n == 0)\n        return 1;\n    int result = 1;\n    while (n != 0)\n    {\n        if ((n & 1) != 0)\n            result *= x;\n        x *= x;\n        n >>= 1;\n    }\n    return result;\n}\n```\n\n","source":"_posts/使用二分法求整数幂.md","raw":"title: 使用二分法求整数幂\ndate: 2015-12-3 08:55:29\ntags: [C,C++,ACM,算法]\ncategories: 算法\ntoc: true\n---\n\n\n### 引言\n---\n在应用中求幂是一个经常使用到的运算。\n那么我们求幂的时候是不是经常这样写\n\n```\nint power(int x,  int n)\n{\n    int result = 1;\n    while (n--)\n        result *= x;\n    return result;\n}\n```\n\n这样写简单直观，但是时间复杂度太高了。\n### 解决思路\n---\n为了减少时间的消耗，我们可以使用**二分法**。\n\n**举个例子：求2的8次幂。**\n\n**设结果为result** \n\n```\nresult = 2^8\n设result1 = 2^4，很容易推出 result  =  result1*result1\n设result2 = 2^2，同理，result1 = result2*result2\n......\n```\n\n```\n再举个例子,result3 = 2^7\n那么 result3 = result1 * 2^3\n2^3 = 2^2 *2^1\n```\n\n那么规律出来了，我们可以写程序了\n\n这里用了一些不常用的C的知识，有可能比较晦涩难懂。\n\n**稳妥起见，这里再复习一下C的知识**\n\n### &和&&的区别：\n#### &--按位与\n举个例子  \n 7的二进制是0111，1的二进制是0001；\n 7&1 即是  0111&0001  = 0001（二进制） = 1（十进制）；\n再举个例子  \n 11&6  即是 1011&0110 = 0010 = 2;\n#### &&--逻辑与\n这个很简单了，只要两个数都不为0 ；结果就是1\n10&&1 = 1；\n1&0 = 0；\n#### <<，>>  位左移和位右移\n依旧举例，将8向左移两位，\n8 >> 2 即为 1000（二进制） 左移两位，结果就是10（二进制），化为十进制那就是2；\n**P.S : n >>= 2 与 n =  n>>2 结果相同。**\n但是在运算速度和内存占用上比后者好一些，这里就不给出详细的解释了。\n\n\n### 核心代码\n---\n```\nint power(int x, int n)\n{\n    if (n == 0)\n        return 1;\n    int result = 1;\n    while (n != 0)\n    {\n        if ((n & 1) != 0)\n            result *= x;\n        x *= x;\n        n >>= 1;\n    }\n    return result;\n}\n```\n\n","slug":"使用二分法求整数幂","published":1,"updated":"2015-12-22T09:54:48.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciii2jl920009oksqffai62nz"},{"title":"RxJava && Retrofit 简化RESTful请求","date":"2015-12-03T08:55:29.000Z","toc":true,"_content":"\n\n## 前言\n\n    最近抽空了解了RxJava && Retrofit 这两个库，然后正好我所在的[微客工作室](wecanstudio.me)要写个签到的App。于是乎把最近学到的好玩的东西都加上了，恰逢博客开张，写篇博文庆祝一下。\n\n## 简介\n\n    1. [RxJava](https://github.com/ReactiveX/RxJava)\n    > 一个在 Java VM 上使用可观测的序列来组成异步的、基于事件的程序的库\n\n    2. [Retrofit](https://square.github.io/retrofit)\n    > 一个 Android 平台上的类型安全的 REST 客户端。\n\n## 推荐教程\n\n    - [给 Android 开发者的 RxJava 详解](http://gank.io/post/560e15be2dca930e00da1083)\n    - [用 Retrofit 2 简化 HTTP 请求](https://realm.io/cn/news/droidcon-jake-wharton-simple-http-retrofit-2/)\n\n## 准备工作\n    1. 添加依赖\n\n\n    ```\n    compile 'io.reactivex:rxjava:1.0.14' \n    compile 'io.reactivex:rxandroid:1.0.1'\n    compile 'com.google.code.gson:gson:2.4'\n    compile 'com.squareup.okhttp:okhttp:2.5.0'\n    compile 'com.squareup.retrofit:retrofit:2.0.0-beta2'\n    compile 'com.squareup.retrofit:converter-gson:2.0.0-beta2'\n    compile 'com.squareup.retrofit:adapter-rxjava:2.0.0-beta2'\n    compile 'com.trello:rxlifecycle:0.3.0'\n    compile 'com.trello:rxlifecycle-components:0.3.0'\n    compile 'com.jakewharton.rxbinding:rxbinding-support-v4:0.2.0'\n    compile 'com.jakewharton.rxbinding:rxbinding-appcompat-v7:0.2.0'\n    compile 'com.jakewharton.rxbinding:rxbinding-design:0.2.0'\n    ```\n\n    **看到这么多的依赖，大家不要慌张。其实有很多只是同一个库的不同版本，例如RxBinding这个库就对Support-v4 AppCompat-v7 等四个包做了匹配，如果你的项目中没有使用Design包或者你不需要做Design包控件的RxBinding，你也就不需要添加最后一行的依赖**\n    2. 阅读[接口文档](https://github.com/XhinLiang/Studio/blob/master/Api.md)\n\n    **我们可以看到这些接口都是典型的RESTful接口这也正中Retrofit的下怀，时间和精力有限，我就只拿登录这个个接口举例，剩余的代码大家如果感兴趣可以去看[源代码](https://github.com/XhinLiang/Studio)**\n\n## 正式开始\n\n    1. 写Api接口\n\n\n    ```\n    public interface Api {\n        String BASE_URL = \"http://121.42.209.19/RestfulApi/index.php/\";\n        @GET(\"api/users\")\n            Observable<User> login(@Query(\"name\") String name, @Query(\"phone\") String phone);\n        //...MORE...\n    }\n```\n\n**因为我们要使用RxJava的Observable来处理数据，所以定义的时候写上Observable的泛型即可**\n2. 写POJO,事实上就是第一步里面出现的 **User**，**BaseData** , **RegisterBody**\n\n```\npublic class User {\n    public int position;\n    public int group_name;\n    public int id;\n    public int sex;\n    public int status;\n    public String phone;\n    public String sign_date;\n    public String name;\n    public String imgurl;\n    public String description;\n    public static final String[] groups = {\n        \"组别\", \"前端\", \"后台\", \"移动\", \"产品\", \"设计\", \"YOU KNOW NOTHING\"\n    };\n    public static final String[] positions = {\n        \"职位\", \"组员\", \"组长\", \"室长\", \"John Snow\"\n    };\n    public static final String[] sexs = {\n        \"性别\", \"男\", \"女\"\n    };\n    public static final int VALUE_STATUS_SIGN = 1;\n    public static final int VALUE_STATUS_UNSIGN = 0;\n}\n```\n\n**这里篇幅有限，贴出来的代码可能有所简化，如果大家有时间不妨去看看源代码**\n\n3. 在Application中进行初始化\n\n```\npublic void onCreate() {\n    super.onCreate();\n    OkHttpClient okHttpClient = new OkHttpClient();\n    //OKHttp的使用\n    okHttpClient.networkInterceptors().add(new Interceptor() {\n            @Override\n            public Response intercept(Chain chain) throws IOException {\n            return chain.proceed(chain.request().newBuilder()\n                .header(KEY_BUILD_VERSION, BuildConfig.VERSION_NAME)\n                .build());\n            }\n            });\n    //初始化Gson\n    Gson gson = new GsonBuilder()\n        .setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)\n        .setDateFormat(DATE_FORMAT_PATTERN)\n        .create();\n    //初始化Retrofit\n    retrofit = new Retrofit.Builder()\n        .client(okHttpClient)\n        .addConverterFactory(GsonConverterFactory.create(gson))\n        .addCallAdapterFactory(RxJavaCallAdapterFactory.create())\n        .baseUrl(Api.BASE_URL)\n        .build();\n}\n//返回Retrofit的API\npublic <T> T createApi(Class<T> service) {\n    if (!apis.containsKey(service)) {\n        T instance = retrofit.create(service);\n        apis.put(service, instance);\n    }\n    //noinspection unchecked\n    return (T) apis.get(service);\n}\n```\n\n**同时Application对外提供静态实例和 Retrofit 实例的Getter（代码略）**\n\n4. 在Activity中获取 **Api** 并绑定点击事件\n\n```\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    binding = DataBindingUtil.setContentView(this, R.layout.activity_login);\n    setSupportActionBar(binding.toolbar);\n    api = App.from(this).createApi(Api.class);\n    ProgressDialog pd = new ProgressDialog(this);\n    Observable.Transformer<User, User> networkingIndicator = RxNetworking.bindConnecting(pd);\n    binding.setName(PreferenceHelper.getInstance(this).getString(App.KEY_PREFERENCE_USER, getString(R.string.nothing)));\n    binding.setPhone(PreferenceHelper.getInstance(this).getString(App.KEY_PREFERENCE_PHONE, getString(R.string.nothing)));\n    observableConnect = Observable\n        //defer操作符是直到有订阅者订阅时，才通过Observable的工厂方法创建Observable并执行\n        //defer操作符能够保证Observable的状态是最新的\n        .defer(new Func0<Observable<User>>() {\n                @Override\n                public Observable<User> call() {\n                return api.login(binding.etName.getText().toString(), binding.etPhone.getText().toString());\n                }\n                })\n    .subscribeOn(Schedulers.io())\n        .observeOn(AndroidSchedulers.mainThread())\n        .compose(networkingIndicator);\n    RxView.clickEvents(binding.btnLogin)\n        .filter(new EditTextFilter(binding.etName, R.string.name_no_input))\n        .filter(new EditTextFilter(binding.etPhone, R.string.phone_no_input))\n        .compose(this.<ViewClickEvent>bindToLifecycle())\n        .subscribe(new Action1<ViewClickEvent>() {\n                @Override\n                public void call(ViewClickEvent viewClickEvent) {\n                login();\n                }\n                });\n    setRxClick(binding.btnRegister)\n        .compose(this.<ViewClickEvent>bindToLifecycle())\n        .subscribe(new Action1<ViewClickEvent>() {\n                @Override\n                public void call(ViewClickEvent viewClickEvent) {\n                startActivity(new Intent(LoginActivity.this, RegisterActivity.class));\n                }\n                });\n    setupUmengUpdate();\n}\nprivate void login() {\n    observableConnect\n        .compose(this.<User>bindToLifecycle())\n        .subscribe(new Action1<User>() {\n                @Override\n                public void call(User user) {\n                PreferenceHelper.getInstance(LoginActivity.this).saveParam(App.KEY_PREFERENCE_USER, binding.etName.getText().toString());\n                PreferenceHelper.getInstance(LoginActivity.this).saveParam(App.KEY_PREFERENCE_PHONE, binding.etPhone.getText().toString());\n                startActivity(new Intent(LoginActivity.this, MainActivity.class).putExtra(MainActivity.KEY_USER, user));\n                finish();\n                }\n                }, new Action1<Throwable>() {\n                @Override\n                public void call(Throwable throwable) {\n                //事实上在code != 200 的时候 , 可以获取响应的body.\n                if (throwable instanceof HttpException){\n                try {\n                showSimpleDialog(R.string.login_fail, ((HttpException) throwable).response().errorBody().string());\n                } catch (IOException e) {\n                showSimpleDialog(R.string.login_fail,throwable.getMessage());\n                }\n                return;\n                }\n                showSimpleDialog(R.string.login_fail,throwable.getMessage());\n                }\n                });\n}\n```\n\n**在博客里总是不适合贴那么多代码的，或者说我的组织能力太差了，贴出来的代码完全不知所云。如果大家有兴趣，还请大家到我的GitHub逛一逛**\n\n\n\n\n","source":"_posts/使用RxJava和Retrofit进行RESTful请求.md","raw":"title: RxJava && Retrofit 简化RESTful请求\ndate: 2015-12-3 16:55:29\ntags: [Android]\ncategories: Android\ntoc: true\n---\n\n\n## 前言\n\n    最近抽空了解了RxJava && Retrofit 这两个库，然后正好我所在的[微客工作室](wecanstudio.me)要写个签到的App。于是乎把最近学到的好玩的东西都加上了，恰逢博客开张，写篇博文庆祝一下。\n\n## 简介\n\n    1. [RxJava](https://github.com/ReactiveX/RxJava)\n    > 一个在 Java VM 上使用可观测的序列来组成异步的、基于事件的程序的库\n\n    2. [Retrofit](https://square.github.io/retrofit)\n    > 一个 Android 平台上的类型安全的 REST 客户端。\n\n## 推荐教程\n\n    - [给 Android 开发者的 RxJava 详解](http://gank.io/post/560e15be2dca930e00da1083)\n    - [用 Retrofit 2 简化 HTTP 请求](https://realm.io/cn/news/droidcon-jake-wharton-simple-http-retrofit-2/)\n\n## 准备工作\n    1. 添加依赖\n\n\n    ```\n    compile 'io.reactivex:rxjava:1.0.14' \n    compile 'io.reactivex:rxandroid:1.0.1'\n    compile 'com.google.code.gson:gson:2.4'\n    compile 'com.squareup.okhttp:okhttp:2.5.0'\n    compile 'com.squareup.retrofit:retrofit:2.0.0-beta2'\n    compile 'com.squareup.retrofit:converter-gson:2.0.0-beta2'\n    compile 'com.squareup.retrofit:adapter-rxjava:2.0.0-beta2'\n    compile 'com.trello:rxlifecycle:0.3.0'\n    compile 'com.trello:rxlifecycle-components:0.3.0'\n    compile 'com.jakewharton.rxbinding:rxbinding-support-v4:0.2.0'\n    compile 'com.jakewharton.rxbinding:rxbinding-appcompat-v7:0.2.0'\n    compile 'com.jakewharton.rxbinding:rxbinding-design:0.2.0'\n    ```\n\n    **看到这么多的依赖，大家不要慌张。其实有很多只是同一个库的不同版本，例如RxBinding这个库就对Support-v4 AppCompat-v7 等四个包做了匹配，如果你的项目中没有使用Design包或者你不需要做Design包控件的RxBinding，你也就不需要添加最后一行的依赖**\n    2. 阅读[接口文档](https://github.com/XhinLiang/Studio/blob/master/Api.md)\n\n    **我们可以看到这些接口都是典型的RESTful接口这也正中Retrofit的下怀，时间和精力有限，我就只拿登录这个个接口举例，剩余的代码大家如果感兴趣可以去看[源代码](https://github.com/XhinLiang/Studio)**\n\n## 正式开始\n\n    1. 写Api接口\n\n\n    ```\n    public interface Api {\n        String BASE_URL = \"http://121.42.209.19/RestfulApi/index.php/\";\n        @GET(\"api/users\")\n            Observable<User> login(@Query(\"name\") String name, @Query(\"phone\") String phone);\n        //...MORE...\n    }\n```\n\n**因为我们要使用RxJava的Observable来处理数据，所以定义的时候写上Observable的泛型即可**\n2. 写POJO,事实上就是第一步里面出现的 **User**，**BaseData** , **RegisterBody**\n\n```\npublic class User {\n    public int position;\n    public int group_name;\n    public int id;\n    public int sex;\n    public int status;\n    public String phone;\n    public String sign_date;\n    public String name;\n    public String imgurl;\n    public String description;\n    public static final String[] groups = {\n        \"组别\", \"前端\", \"后台\", \"移动\", \"产品\", \"设计\", \"YOU KNOW NOTHING\"\n    };\n    public static final String[] positions = {\n        \"职位\", \"组员\", \"组长\", \"室长\", \"John Snow\"\n    };\n    public static final String[] sexs = {\n        \"性别\", \"男\", \"女\"\n    };\n    public static final int VALUE_STATUS_SIGN = 1;\n    public static final int VALUE_STATUS_UNSIGN = 0;\n}\n```\n\n**这里篇幅有限，贴出来的代码可能有所简化，如果大家有时间不妨去看看源代码**\n\n3. 在Application中进行初始化\n\n```\npublic void onCreate() {\n    super.onCreate();\n    OkHttpClient okHttpClient = new OkHttpClient();\n    //OKHttp的使用\n    okHttpClient.networkInterceptors().add(new Interceptor() {\n            @Override\n            public Response intercept(Chain chain) throws IOException {\n            return chain.proceed(chain.request().newBuilder()\n                .header(KEY_BUILD_VERSION, BuildConfig.VERSION_NAME)\n                .build());\n            }\n            });\n    //初始化Gson\n    Gson gson = new GsonBuilder()\n        .setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)\n        .setDateFormat(DATE_FORMAT_PATTERN)\n        .create();\n    //初始化Retrofit\n    retrofit = new Retrofit.Builder()\n        .client(okHttpClient)\n        .addConverterFactory(GsonConverterFactory.create(gson))\n        .addCallAdapterFactory(RxJavaCallAdapterFactory.create())\n        .baseUrl(Api.BASE_URL)\n        .build();\n}\n//返回Retrofit的API\npublic <T> T createApi(Class<T> service) {\n    if (!apis.containsKey(service)) {\n        T instance = retrofit.create(service);\n        apis.put(service, instance);\n    }\n    //noinspection unchecked\n    return (T) apis.get(service);\n}\n```\n\n**同时Application对外提供静态实例和 Retrofit 实例的Getter（代码略）**\n\n4. 在Activity中获取 **Api** 并绑定点击事件\n\n```\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    binding = DataBindingUtil.setContentView(this, R.layout.activity_login);\n    setSupportActionBar(binding.toolbar);\n    api = App.from(this).createApi(Api.class);\n    ProgressDialog pd = new ProgressDialog(this);\n    Observable.Transformer<User, User> networkingIndicator = RxNetworking.bindConnecting(pd);\n    binding.setName(PreferenceHelper.getInstance(this).getString(App.KEY_PREFERENCE_USER, getString(R.string.nothing)));\n    binding.setPhone(PreferenceHelper.getInstance(this).getString(App.KEY_PREFERENCE_PHONE, getString(R.string.nothing)));\n    observableConnect = Observable\n        //defer操作符是直到有订阅者订阅时，才通过Observable的工厂方法创建Observable并执行\n        //defer操作符能够保证Observable的状态是最新的\n        .defer(new Func0<Observable<User>>() {\n                @Override\n                public Observable<User> call() {\n                return api.login(binding.etName.getText().toString(), binding.etPhone.getText().toString());\n                }\n                })\n    .subscribeOn(Schedulers.io())\n        .observeOn(AndroidSchedulers.mainThread())\n        .compose(networkingIndicator);\n    RxView.clickEvents(binding.btnLogin)\n        .filter(new EditTextFilter(binding.etName, R.string.name_no_input))\n        .filter(new EditTextFilter(binding.etPhone, R.string.phone_no_input))\n        .compose(this.<ViewClickEvent>bindToLifecycle())\n        .subscribe(new Action1<ViewClickEvent>() {\n                @Override\n                public void call(ViewClickEvent viewClickEvent) {\n                login();\n                }\n                });\n    setRxClick(binding.btnRegister)\n        .compose(this.<ViewClickEvent>bindToLifecycle())\n        .subscribe(new Action1<ViewClickEvent>() {\n                @Override\n                public void call(ViewClickEvent viewClickEvent) {\n                startActivity(new Intent(LoginActivity.this, RegisterActivity.class));\n                }\n                });\n    setupUmengUpdate();\n}\nprivate void login() {\n    observableConnect\n        .compose(this.<User>bindToLifecycle())\n        .subscribe(new Action1<User>() {\n                @Override\n                public void call(User user) {\n                PreferenceHelper.getInstance(LoginActivity.this).saveParam(App.KEY_PREFERENCE_USER, binding.etName.getText().toString());\n                PreferenceHelper.getInstance(LoginActivity.this).saveParam(App.KEY_PREFERENCE_PHONE, binding.etPhone.getText().toString());\n                startActivity(new Intent(LoginActivity.this, MainActivity.class).putExtra(MainActivity.KEY_USER, user));\n                finish();\n                }\n                }, new Action1<Throwable>() {\n                @Override\n                public void call(Throwable throwable) {\n                //事实上在code != 200 的时候 , 可以获取响应的body.\n                if (throwable instanceof HttpException){\n                try {\n                showSimpleDialog(R.string.login_fail, ((HttpException) throwable).response().errorBody().string());\n                } catch (IOException e) {\n                showSimpleDialog(R.string.login_fail,throwable.getMessage());\n                }\n                return;\n                }\n                showSimpleDialog(R.string.login_fail,throwable.getMessage());\n                }\n                });\n}\n```\n\n**在博客里总是不适合贴那么多代码的，或者说我的组织能力太差了，贴出来的代码完全不知所云。如果大家有兴趣，还请大家到我的GitHub逛一逛**\n\n\n\n\n","slug":"使用RxJava和Retrofit进行RESTful请求","published":1,"updated":"2015-12-22T14:32:25.697Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciii2jl9k000koksq0trw9vub"}],"PostAsset":[],"PostCategory":[{"post_id":"ciii2jl8p0000oksqwutf9sbt","category_id":"ciii2jl8v0001oksqptf99059","_id":"ciii2jl8z0004oksqrkhaf3le"},{"post_id":"ciii2jl920009oksqffai62nz","category_id":"ciii2jl94000aoksq2pcsfx9m","_id":"ciii2jl95000doksqxc275h6z"},{"post_id":"ciii2jl9k000koksq0trw9vub","category_id":"ciii2jl8v0001oksqptf99059","_id":"ciii2jl9m000loksqfy64sj3w"}],"PostTag":[{"post_id":"ciii2jl8p0000oksqwutf9sbt","tag_id":"ciii2jl8w0002oksqmfk4pcy2","_id":"ciii2jl900006oksq94o8n6ue"},{"post_id":"ciii2jl8p0000oksqwutf9sbt","tag_id":"ciii2jl8z0003oksqweg5mtmo","_id":"ciii2jl900007oksqd5llnk3u"},{"post_id":"ciii2jl8p0000oksqwutf9sbt","tag_id":"ciii2jl900005oksqlji3sdaf","_id":"ciii2jl900008oksqq25loj86"},{"post_id":"ciii2jl920009oksqffai62nz","tag_id":"ciii2jl94000boksq2yo53i05","_id":"ciii2jl97000goksqb67qtu8x"},{"post_id":"ciii2jl920009oksqffai62nz","tag_id":"ciii2jl95000coksqsb9s1xup","_id":"ciii2jl98000hoksqxnnruwiv"},{"post_id":"ciii2jl920009oksqffai62nz","tag_id":"ciii2jl96000eoksqfp4d13yw","_id":"ciii2jl98000ioksqqbpvw6bm"},{"post_id":"ciii2jl920009oksqffai62nz","tag_id":"ciii2jl96000foksq4nmow3al","_id":"ciii2jl99000joksqkh17tg3k"},{"post_id":"ciii2jl9k000koksq0trw9vub","tag_id":"ciii2jl8w0002oksqmfk4pcy2","_id":"ciii2jl9m000moksq3f2o9j1o"}],"Tag":[{"name":"Android","_id":"ciii2jl8w0002oksqmfk4pcy2"},{"name":"Java","_id":"ciii2jl8z0003oksqweg5mtmo"},{"name":"RxJava","_id":"ciii2jl900005oksqlji3sdaf"},{"name":"C","_id":"ciii2jl94000boksq2yo53i05"},{"name":"C++","_id":"ciii2jl95000coksqsb9s1xup"},{"name":"ACM","_id":"ciii2jl96000eoksqfp4d13yw"},{"name":"算法","_id":"ciii2jl96000foksq4nmow3al"}]}}